package net.cominfo.digiagent.persistence.domain;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SortableCriteria {

	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database table t_da_sortable
	 * @ibatorgenerated  Sun Apr 10 20:46:03 CST 2011
	 */
	protected String orderByClause;
	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database table t_da_sortable
	 * @ibatorgenerated  Sun Apr 10 20:46:03 CST 2011
	 */
	protected List<Criteria> oredCriteria;

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table t_da_sortable
	 * @ibatorgenerated  Sun Apr 10 20:46:03 CST 2011
	 */
	public SortableCriteria() {
		oredCriteria = new ArrayList<Criteria>();
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table t_da_sortable
	 * @ibatorgenerated  Sun Apr 10 20:46:03 CST 2011
	 */
	protected SortableCriteria(SortableCriteria example) {
		this.orderByClause = example.orderByClause;
		this.oredCriteria = example.oredCriteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table t_da_sortable
	 * @ibatorgenerated  Sun Apr 10 20:46:03 CST 2011
	 */
	public void setOrderByClause(String orderByClause) {
		this.orderByClause = orderByClause;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table t_da_sortable
	 * @ibatorgenerated  Sun Apr 10 20:46:03 CST 2011
	 */
	public String getOrderByClause() {
		return orderByClause;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table t_da_sortable
	 * @ibatorgenerated  Sun Apr 10 20:46:03 CST 2011
	 */
	public List<Criteria> getOredCriteria() {
		return oredCriteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table t_da_sortable
	 * @ibatorgenerated  Sun Apr 10 20:46:03 CST 2011
	 */
	public void or(Criteria criteria) {
		oredCriteria.add(criteria);
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table t_da_sortable
	 * @ibatorgenerated  Sun Apr 10 20:46:03 CST 2011
	 */
	public Criteria createCriteria() {
		Criteria criteria = createCriteriaInternal();
		if (oredCriteria.size() == 0) {
			oredCriteria.add(criteria);
		}
		return criteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table t_da_sortable
	 * @ibatorgenerated  Sun Apr 10 20:46:03 CST 2011
	 */
	protected Criteria createCriteriaInternal() {
		Criteria criteria = new Criteria();
		return criteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table t_da_sortable
	 * @ibatorgenerated  Sun Apr 10 20:46:03 CST 2011
	 */
	public void clear() {
		oredCriteria.clear();
	}

	/**
	 * This class was generated by Apache iBATIS ibator. This class corresponds to the database table t_da_sortable
	 * @ibatorgenerated  Sun Apr 10 20:46:03 CST 2011
	 */
	public static class Criteria {
		protected List<String> criteriaWithoutValue;
		protected List<Map<String, Object>> criteriaWithSingleValue;
		protected List<Map<String, Object>> criteriaWithListValue;
		protected List<Map<String, Object>> criteriaWithBetweenValue;

		protected Criteria() {
			super();
			criteriaWithoutValue = new ArrayList<String>();
			criteriaWithSingleValue = new ArrayList<Map<String, Object>>();
			criteriaWithListValue = new ArrayList<Map<String, Object>>();
			criteriaWithBetweenValue = new ArrayList<Map<String, Object>>();
		}

		public boolean isValid() {
			return criteriaWithoutValue.size() > 0
					|| criteriaWithSingleValue.size() > 0
					|| criteriaWithListValue.size() > 0
					|| criteriaWithBetweenValue.size() > 0;
		}

		public List<String> getCriteriaWithoutValue() {
			return criteriaWithoutValue;
		}

		public List<Map<String, Object>> getCriteriaWithSingleValue() {
			return criteriaWithSingleValue;
		}

		public List<Map<String, Object>> getCriteriaWithListValue() {
			return criteriaWithListValue;
		}

		public List<Map<String, Object>> getCriteriaWithBetweenValue() {
			return criteriaWithBetweenValue;
		}

		protected void addCriterion(String condition) {
			if (condition == null) {
				throw new RuntimeException("Value for condition cannot be null");
			}
			criteriaWithoutValue.add(condition);
		}

		protected void addCriterion(String condition, Object value,
				String property) {
			if (value == null) {
				throw new RuntimeException("Value for " + property
						+ " cannot be null");
			}
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("condition", condition);
			map.put("value", value);
			criteriaWithSingleValue.add(map);
		}

		protected void addCriterion(String condition,
				List<? extends Object> values, String property) {
			if (values == null || values.size() == 0) {
				throw new RuntimeException("Value list for " + property
						+ " cannot be null or empty");
			}
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("condition", condition);
			map.put("values", values);
			criteriaWithListValue.add(map);
		}

		protected void addCriterion(String condition, Object value1,
				Object value2, String property) {
			if (value1 == null || value2 == null) {
				throw new RuntimeException("Between values for " + property
						+ " cannot be null");
			}
			List<Object> list = new ArrayList<Object>();
			list.add(value1);
			list.add(value2);
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("condition", condition);
			map.put("values", list);
			criteriaWithBetweenValue.add(map);
		}

		public Criteria andSortableIdIsNull() {
			addCriterion("SORTABLE_ID is null");
			return this;
		}

		public Criteria andSortableIdIsNotNull() {
			addCriterion("SORTABLE_ID is not null");
			return this;
		}

		public Criteria andSortableIdEqualTo(Integer value) {
			addCriterion("SORTABLE_ID =", value, "sortableId");
			return this;
		}

		public Criteria andSortableIdNotEqualTo(Integer value) {
			addCriterion("SORTABLE_ID <>", value, "sortableId");
			return this;
		}

		public Criteria andSortableIdGreaterThan(Integer value) {
			addCriterion("SORTABLE_ID >", value, "sortableId");
			return this;
		}

		public Criteria andSortableIdGreaterThanOrEqualTo(Integer value) {
			addCriterion("SORTABLE_ID >=", value, "sortableId");
			return this;
		}

		public Criteria andSortableIdLessThan(Integer value) {
			addCriterion("SORTABLE_ID <", value, "sortableId");
			return this;
		}

		public Criteria andSortableIdLessThanOrEqualTo(Integer value) {
			addCriterion("SORTABLE_ID <=", value, "sortableId");
			return this;
		}

		public Criteria andSortableIdIn(List<Integer> values) {
			addCriterion("SORTABLE_ID in", values, "sortableId");
			return this;
		}

		public Criteria andSortableIdNotIn(List<Integer> values) {
			addCriterion("SORTABLE_ID not in", values, "sortableId");
			return this;
		}

		public Criteria andSortableIdBetween(Integer value1, Integer value2) {
			addCriterion("SORTABLE_ID between", value1, value2, "sortableId");
			return this;
		}

		public Criteria andSortableIdNotBetween(Integer value1, Integer value2) {
			addCriterion("SORTABLE_ID not between", value1, value2,
					"sortableId");
			return this;
		}

		public Criteria andSortableKeyIsNull() {
			addCriterion("SORTABLE_KEY is null");
			return this;
		}

		public Criteria andSortableKeyIsNotNull() {
			addCriterion("SORTABLE_KEY is not null");
			return this;
		}

		public Criteria andSortableKeyEqualTo(Integer value) {
			addCriterion("SORTABLE_KEY =", value, "sortableKey");
			return this;
		}

		public Criteria andSortableKeyNotEqualTo(Integer value) {
			addCriterion("SORTABLE_KEY <>", value, "sortableKey");
			return this;
		}

		public Criteria andSortableKeyGreaterThan(Integer value) {
			addCriterion("SORTABLE_KEY >", value, "sortableKey");
			return this;
		}

		public Criteria andSortableKeyGreaterThanOrEqualTo(Integer value) {
			addCriterion("SORTABLE_KEY >=", value, "sortableKey");
			return this;
		}

		public Criteria andSortableKeyLessThan(Integer value) {
			addCriterion("SORTABLE_KEY <", value, "sortableKey");
			return this;
		}

		public Criteria andSortableKeyLessThanOrEqualTo(Integer value) {
			addCriterion("SORTABLE_KEY <=", value, "sortableKey");
			return this;
		}

		public Criteria andSortableKeyIn(List<Integer> values) {
			addCriterion("SORTABLE_KEY in", values, "sortableKey");
			return this;
		}

		public Criteria andSortableKeyNotIn(List<Integer> values) {
			addCriterion("SORTABLE_KEY not in", values, "sortableKey");
			return this;
		}

		public Criteria andSortableKeyBetween(Integer value1, Integer value2) {
			addCriterion("SORTABLE_KEY between", value1, value2, "sortableKey");
			return this;
		}

		public Criteria andSortableKeyNotBetween(Integer value1, Integer value2) {
			addCriterion("SORTABLE_KEY not between", value1, value2,
					"sortableKey");
			return this;
		}

		public Criteria andSortableOrderIsNull() {
			addCriterion("SORTABLE_ORDER is null");
			return this;
		}

		public Criteria andSortableOrderIsNotNull() {
			addCriterion("SORTABLE_ORDER is not null");
			return this;
		}

		public Criteria andSortableOrderEqualTo(Integer value) {
			addCriterion("SORTABLE_ORDER =", value, "sortableOrder");
			return this;
		}

		public Criteria andSortableOrderNotEqualTo(Integer value) {
			addCriterion("SORTABLE_ORDER <>", value, "sortableOrder");
			return this;
		}

		public Criteria andSortableOrderGreaterThan(Integer value) {
			addCriterion("SORTABLE_ORDER >", value, "sortableOrder");
			return this;
		}

		public Criteria andSortableOrderGreaterThanOrEqualTo(Integer value) {
			addCriterion("SORTABLE_ORDER >=", value, "sortableOrder");
			return this;
		}

		public Criteria andSortableOrderLessThan(Integer value) {
			addCriterion("SORTABLE_ORDER <", value, "sortableOrder");
			return this;
		}

		public Criteria andSortableOrderLessThanOrEqualTo(Integer value) {
			addCriterion("SORTABLE_ORDER <=", value, "sortableOrder");
			return this;
		}

		public Criteria andSortableOrderIn(List<Integer> values) {
			addCriterion("SORTABLE_ORDER in", values, "sortableOrder");
			return this;
		}

		public Criteria andSortableOrderNotIn(List<Integer> values) {
			addCriterion("SORTABLE_ORDER not in", values, "sortableOrder");
			return this;
		}

		public Criteria andSortableOrderBetween(Integer value1, Integer value2) {
			addCriterion("SORTABLE_ORDER between", value1, value2,
					"sortableOrder");
			return this;
		}

		public Criteria andSortableOrderNotBetween(Integer value1,
				Integer value2) {
			addCriterion("SORTABLE_ORDER not between", value1, value2,
					"sortableOrder");
			return this;
		}

		public Criteria andSortableTypeIsNull() {
			addCriterion("SORTABLE_TYPE is null");
			return this;
		}

		public Criteria andSortableTypeIsNotNull() {
			addCriterion("SORTABLE_TYPE is not null");
			return this;
		}

		public Criteria andSortableTypeEqualTo(String value) {
			addCriterion("SORTABLE_TYPE =", value, "sortableType");
			return this;
		}

		public Criteria andSortableTypeNotEqualTo(String value) {
			addCriterion("SORTABLE_TYPE <>", value, "sortableType");
			return this;
		}

		public Criteria andSortableTypeGreaterThan(String value) {
			addCriterion("SORTABLE_TYPE >", value, "sortableType");
			return this;
		}

		public Criteria andSortableTypeGreaterThanOrEqualTo(String value) {
			addCriterion("SORTABLE_TYPE >=", value, "sortableType");
			return this;
		}

		public Criteria andSortableTypeLessThan(String value) {
			addCriterion("SORTABLE_TYPE <", value, "sortableType");
			return this;
		}

		public Criteria andSortableTypeLessThanOrEqualTo(String value) {
			addCriterion("SORTABLE_TYPE <=", value, "sortableType");
			return this;
		}

		public Criteria andSortableTypeLike(String value) {
			addCriterion("SORTABLE_TYPE like", value, "sortableType");
			return this;
		}

		public Criteria andSortableTypeNotLike(String value) {
			addCriterion("SORTABLE_TYPE not like", value, "sortableType");
			return this;
		}

		public Criteria andSortableTypeIn(List<String> values) {
			addCriterion("SORTABLE_TYPE in", values, "sortableType");
			return this;
		}

		public Criteria andSortableTypeNotIn(List<String> values) {
			addCriterion("SORTABLE_TYPE not in", values, "sortableType");
			return this;
		}

		public Criteria andSortableTypeBetween(String value1, String value2) {
			addCriterion("SORTABLE_TYPE between", value1, value2,
					"sortableType");
			return this;
		}

		public Criteria andSortableTypeNotBetween(String value1, String value2) {
			addCriterion("SORTABLE_TYPE not between", value1, value2,
					"sortableType");
			return this;
		}

		public Criteria andParentIdIsNull() {
			addCriterion("PARENT_ID is null");
			return this;
		}

		public Criteria andParentIdIsNotNull() {
			addCriterion("PARENT_ID is not null");
			return this;
		}

		public Criteria andParentIdEqualTo(Integer value) {
			addCriterion("PARENT_ID =", value, "parentId");
			return this;
		}

		public Criteria andParentIdNotEqualTo(Integer value) {
			addCriterion("PARENT_ID <>", value, "parentId");
			return this;
		}

		public Criteria andParentIdGreaterThan(Integer value) {
			addCriterion("PARENT_ID >", value, "parentId");
			return this;
		}

		public Criteria andParentIdGreaterThanOrEqualTo(Integer value) {
			addCriterion("PARENT_ID >=", value, "parentId");
			return this;
		}

		public Criteria andParentIdLessThan(Integer value) {
			addCriterion("PARENT_ID <", value, "parentId");
			return this;
		}

		public Criteria andParentIdLessThanOrEqualTo(Integer value) {
			addCriterion("PARENT_ID <=", value, "parentId");
			return this;
		}

		public Criteria andParentIdIn(List<Integer> values) {
			addCriterion("PARENT_ID in", values, "parentId");
			return this;
		}

		public Criteria andParentIdNotIn(List<Integer> values) {
			addCriterion("PARENT_ID not in", values, "parentId");
			return this;
		}

		public Criteria andParentIdBetween(Integer value1, Integer value2) {
			addCriterion("PARENT_ID between", value1, value2, "parentId");
			return this;
		}

		public Criteria andParentIdNotBetween(Integer value1, Integer value2) {
			addCriterion("PARENT_ID not between", value1, value2, "parentId");
			return this;
		}
	}
}