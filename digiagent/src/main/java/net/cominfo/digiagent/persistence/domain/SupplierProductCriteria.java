package net.cominfo.digiagent.persistence.domain;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Date;
import java.util.Iterator;

public class SupplierProductCriteria {

	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database table t_da_supplierproduct
	 * @ibatorgenerated  Tue Oct 12 21:05:52 CST 2010
	 */
	protected String orderByClause;
	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database table t_da_supplierproduct
	 * @ibatorgenerated  Tue Oct 12 21:05:52 CST 2010
	 */
	protected List<Criteria> oredCriteria;

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table t_da_supplierproduct
	 * @ibatorgenerated  Tue Oct 12 21:05:52 CST 2010
	 */
	public SupplierProductCriteria() {
		oredCriteria = new ArrayList<Criteria>();
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table t_da_supplierproduct
	 * @ibatorgenerated  Tue Oct 12 21:05:52 CST 2010
	 */
	protected SupplierProductCriteria(SupplierProductCriteria example) {
		this.orderByClause = example.orderByClause;
		this.oredCriteria = example.oredCriteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table t_da_supplierproduct
	 * @ibatorgenerated  Tue Oct 12 21:05:52 CST 2010
	 */
	public void setOrderByClause(String orderByClause) {
		this.orderByClause = orderByClause;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table t_da_supplierproduct
	 * @ibatorgenerated  Tue Oct 12 21:05:52 CST 2010
	 */
	public String getOrderByClause() {
		return orderByClause;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table t_da_supplierproduct
	 * @ibatorgenerated  Tue Oct 12 21:05:52 CST 2010
	 */
	public List<Criteria> getOredCriteria() {
		return oredCriteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table t_da_supplierproduct
	 * @ibatorgenerated  Tue Oct 12 21:05:52 CST 2010
	 */
	public void or(Criteria criteria) {
		oredCriteria.add(criteria);
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table t_da_supplierproduct
	 * @ibatorgenerated  Tue Oct 12 21:05:52 CST 2010
	 */
	public Criteria createCriteria() {
		Criteria criteria = createCriteriaInternal();
		if (oredCriteria.size() == 0) {
			oredCriteria.add(criteria);
		}
		return criteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table t_da_supplierproduct
	 * @ibatorgenerated  Tue Oct 12 21:05:52 CST 2010
	 */
	protected Criteria createCriteriaInternal() {
		Criteria criteria = new Criteria();
		return criteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table t_da_supplierproduct
	 * @ibatorgenerated  Tue Oct 12 21:05:52 CST 2010
	 */
	public void clear() {
		oredCriteria.clear();
	}

	/**
	 * This class was generated by Apache iBATIS ibator. This class corresponds to the database table t_da_supplierproduct
	 * @ibatorgenerated  Tue Oct 12 21:05:52 CST 2010
	 */
	public static class Criteria {
		protected List<String> criteriaWithoutValue;
		protected List<Map<String, Object>> criteriaWithSingleValue;
		protected List<Map<String, Object>> criteriaWithListValue;
		protected List<Map<String, Object>> criteriaWithBetweenValue;

		protected Criteria() {
			super();
			criteriaWithoutValue = new ArrayList<String>();
			criteriaWithSingleValue = new ArrayList<Map<String, Object>>();
			criteriaWithListValue = new ArrayList<Map<String, Object>>();
			criteriaWithBetweenValue = new ArrayList<Map<String, Object>>();
		}

		public boolean isValid() {
			return criteriaWithoutValue.size() > 0
					|| criteriaWithSingleValue.size() > 0
					|| criteriaWithListValue.size() > 0
					|| criteriaWithBetweenValue.size() > 0;
		}

		public List<String> getCriteriaWithoutValue() {
			return criteriaWithoutValue;
		}

		public List<Map<String, Object>> getCriteriaWithSingleValue() {
			return criteriaWithSingleValue;
		}

		public List<Map<String, Object>> getCriteriaWithListValue() {
			return criteriaWithListValue;
		}

		public List<Map<String, Object>> getCriteriaWithBetweenValue() {
			return criteriaWithBetweenValue;
		}

		protected void addCriterion(String condition) {
			if (condition == null) {
				throw new RuntimeException("Value for condition cannot be null");
			}
			criteriaWithoutValue.add(condition);
		}

		protected void addCriterion(String condition, Object value,
				String property) {
			if (value == null) {
				throw new RuntimeException("Value for " + property
						+ " cannot be null");
			}
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("condition", condition);
			map.put("value", value);
			criteriaWithSingleValue.add(map);
		}

		protected void addCriterion(String condition,
				List<? extends Object> values, String property) {
			if (values == null || values.size() == 0) {
				throw new RuntimeException("Value list for " + property
						+ " cannot be null or empty");
			}
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("condition", condition);
			map.put("values", values);
			criteriaWithListValue.add(map);
		}

		protected void addCriterion(String condition, Object value1,
				Object value2, String property) {
			if (value1 == null || value2 == null) {
				throw new RuntimeException("Between values for " + property
						+ " cannot be null");
			}
			List<Object> list = new ArrayList<Object>();
			list.add(value1);
			list.add(value2);
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("condition", condition);
			map.put("values", list);
			criteriaWithBetweenValue.add(map);
		}

		protected void addCriterionForJDBCDate(String condition, Date value,
				String property) {
			addCriterion(condition, new java.sql.Date(value.getTime()),
					property);
		}

		protected void addCriterionForJDBCDate(String condition,
				List<Date> values, String property) {
			if (values == null || values.size() == 0) {
				throw new RuntimeException("Value list for " + property
						+ " cannot be null or empty");
			}
			List<java.sql.Date> dateList = new ArrayList<java.sql.Date>();
			Iterator<Date> iter = values.iterator();
			while (iter.hasNext()) {
				dateList.add(new java.sql.Date(iter.next().getTime()));
			}
			addCriterion(condition, dateList, property);
		}

		protected void addCriterionForJDBCDate(String condition, Date value1,
				Date value2, String property) {
			if (value1 == null || value2 == null) {
				throw new RuntimeException("Between values for " + property
						+ " cannot be null");
			}
			addCriterion(condition, new java.sql.Date(value1.getTime()),
					new java.sql.Date(value2.getTime()), property);
		}

		public Criteria andProductbrandIdIsNull() {
			addCriterion("PRODUCTBRAND_ID is null");
			return this;
		}

		public Criteria andProductbrandIdIsNotNull() {
			addCriterion("PRODUCTBRAND_ID is not null");
			return this;
		}

		public Criteria andProductbrandIdEqualTo(Integer value) {
			addCriterion("PRODUCTBRAND_ID =", value, "productbrandId");
			return this;
		}

		public Criteria andProductbrandIdNotEqualTo(Integer value) {
			addCriterion("PRODUCTBRAND_ID <>", value, "productbrandId");
			return this;
		}

		public Criteria andProductbrandIdGreaterThan(Integer value) {
			addCriterion("PRODUCTBRAND_ID >", value, "productbrandId");
			return this;
		}

		public Criteria andProductbrandIdGreaterThanOrEqualTo(Integer value) {
			addCriterion("PRODUCTBRAND_ID >=", value, "productbrandId");
			return this;
		}

		public Criteria andProductbrandIdLessThan(Integer value) {
			addCriterion("PRODUCTBRAND_ID <", value, "productbrandId");
			return this;
		}

		public Criteria andProductbrandIdLessThanOrEqualTo(Integer value) {
			addCriterion("PRODUCTBRAND_ID <=", value, "productbrandId");
			return this;
		}

		public Criteria andProductbrandIdIn(List<Integer> values) {
			addCriterion("PRODUCTBRAND_ID in", values, "productbrandId");
			return this;
		}

		public Criteria andProductbrandIdNotIn(List<Integer> values) {
			addCriterion("PRODUCTBRAND_ID not in", values, "productbrandId");
			return this;
		}

		public Criteria andProductbrandIdBetween(Integer value1, Integer value2) {
			addCriterion("PRODUCTBRAND_ID between", value1, value2,
					"productbrandId");
			return this;
		}

		public Criteria andProductbrandIdNotBetween(Integer value1,
				Integer value2) {
			addCriterion("PRODUCTBRAND_ID not between", value1, value2,
					"productbrandId");
			return this;
		}

		public Criteria andSupplierIdIsNull() {
			addCriterion("SUPPLIER_ID is null");
			return this;
		}

		public Criteria andSupplierIdIsNotNull() {
			addCriterion("SUPPLIER_ID is not null");
			return this;
		}

		public Criteria andSupplierIdEqualTo(Integer value) {
			addCriterion("SUPPLIER_ID =", value, "supplierId");
			return this;
		}

		public Criteria andSupplierIdNotEqualTo(Integer value) {
			addCriterion("SUPPLIER_ID <>", value, "supplierId");
			return this;
		}

		public Criteria andSupplierIdGreaterThan(Integer value) {
			addCriterion("SUPPLIER_ID >", value, "supplierId");
			return this;
		}

		public Criteria andSupplierIdGreaterThanOrEqualTo(Integer value) {
			addCriterion("SUPPLIER_ID >=", value, "supplierId");
			return this;
		}

		public Criteria andSupplierIdLessThan(Integer value) {
			addCriterion("SUPPLIER_ID <", value, "supplierId");
			return this;
		}

		public Criteria andSupplierIdLessThanOrEqualTo(Integer value) {
			addCriterion("SUPPLIER_ID <=", value, "supplierId");
			return this;
		}

		public Criteria andSupplierIdIn(List<Integer> values) {
			addCriterion("SUPPLIER_ID in", values, "supplierId");
			return this;
		}

		public Criteria andSupplierIdNotIn(List<Integer> values) {
			addCriterion("SUPPLIER_ID not in", values, "supplierId");
			return this;
		}

		public Criteria andSupplierIdBetween(Integer value1, Integer value2) {
			addCriterion("SUPPLIER_ID between", value1, value2, "supplierId");
			return this;
		}

		public Criteria andSupplierIdNotBetween(Integer value1, Integer value2) {
			addCriterion("SUPPLIER_ID not between", value1, value2,
					"supplierId");
			return this;
		}

		public Criteria andCreateDateIsNull() {
			addCriterion("CREATE_DATE is null");
			return this;
		}

		public Criteria andCreateDateIsNotNull() {
			addCriterion("CREATE_DATE is not null");
			return this;
		}

		public Criteria andCreateDateEqualTo(Date value) {
			addCriterionForJDBCDate("CREATE_DATE =", value, "createDate");
			return this;
		}

		public Criteria andCreateDateNotEqualTo(Date value) {
			addCriterionForJDBCDate("CREATE_DATE <>", value, "createDate");
			return this;
		}

		public Criteria andCreateDateGreaterThan(Date value) {
			addCriterionForJDBCDate("CREATE_DATE >", value, "createDate");
			return this;
		}

		public Criteria andCreateDateGreaterThanOrEqualTo(Date value) {
			addCriterionForJDBCDate("CREATE_DATE >=", value, "createDate");
			return this;
		}

		public Criteria andCreateDateLessThan(Date value) {
			addCriterionForJDBCDate("CREATE_DATE <", value, "createDate");
			return this;
		}

		public Criteria andCreateDateLessThanOrEqualTo(Date value) {
			addCriterionForJDBCDate("CREATE_DATE <=", value, "createDate");
			return this;
		}

		public Criteria andCreateDateIn(List<Date> values) {
			addCriterionForJDBCDate("CREATE_DATE in", values, "createDate");
			return this;
		}

		public Criteria andCreateDateNotIn(List<Date> values) {
			addCriterionForJDBCDate("CREATE_DATE not in", values, "createDate");
			return this;
		}

		public Criteria andCreateDateBetween(Date value1, Date value2) {
			addCriterionForJDBCDate("CREATE_DATE between", value1, value2,
					"createDate");
			return this;
		}

		public Criteria andCreateDateNotBetween(Date value1, Date value2) {
			addCriterionForJDBCDate("CREATE_DATE not between", value1, value2,
					"createDate");
			return this;
		}

		public Criteria andStartDateIsNull() {
			addCriterion("START_DATE is null");
			return this;
		}

		public Criteria andStartDateIsNotNull() {
			addCriterion("START_DATE is not null");
			return this;
		}

		public Criteria andStartDateEqualTo(Date value) {
			addCriterionForJDBCDate("START_DATE =", value, "startDate");
			return this;
		}

		public Criteria andStartDateNotEqualTo(Date value) {
			addCriterionForJDBCDate("START_DATE <>", value, "startDate");
			return this;
		}

		public Criteria andStartDateGreaterThan(Date value) {
			addCriterionForJDBCDate("START_DATE >", value, "startDate");
			return this;
		}

		public Criteria andStartDateGreaterThanOrEqualTo(Date value) {
			addCriterionForJDBCDate("START_DATE >=", value, "startDate");
			return this;
		}

		public Criteria andStartDateLessThan(Date value) {
			addCriterionForJDBCDate("START_DATE <", value, "startDate");
			return this;
		}

		public Criteria andStartDateLessThanOrEqualTo(Date value) {
			addCriterionForJDBCDate("START_DATE <=", value, "startDate");
			return this;
		}

		public Criteria andStartDateIn(List<Date> values) {
			addCriterionForJDBCDate("START_DATE in", values, "startDate");
			return this;
		}

		public Criteria andStartDateNotIn(List<Date> values) {
			addCriterionForJDBCDate("START_DATE not in", values, "startDate");
			return this;
		}

		public Criteria andStartDateBetween(Date value1, Date value2) {
			addCriterionForJDBCDate("START_DATE between", value1, value2,
					"startDate");
			return this;
		}

		public Criteria andStartDateNotBetween(Date value1, Date value2) {
			addCriterionForJDBCDate("START_DATE not between", value1, value2,
					"startDate");
			return this;
		}

		public Criteria andEndDateIsNull() {
			addCriterion("END_DATE is null");
			return this;
		}

		public Criteria andEndDateIsNotNull() {
			addCriterion("END_DATE is not null");
			return this;
		}

		public Criteria andEndDateEqualTo(Date value) {
			addCriterionForJDBCDate("END_DATE =", value, "endDate");
			return this;
		}

		public Criteria andEndDateNotEqualTo(Date value) {
			addCriterionForJDBCDate("END_DATE <>", value, "endDate");
			return this;
		}

		public Criteria andEndDateGreaterThan(Date value) {
			addCriterionForJDBCDate("END_DATE >", value, "endDate");
			return this;
		}

		public Criteria andEndDateGreaterThanOrEqualTo(Date value) {
			addCriterionForJDBCDate("END_DATE >=", value, "endDate");
			return this;
		}

		public Criteria andEndDateLessThan(Date value) {
			addCriterionForJDBCDate("END_DATE <", value, "endDate");
			return this;
		}

		public Criteria andEndDateLessThanOrEqualTo(Date value) {
			addCriterionForJDBCDate("END_DATE <=", value, "endDate");
			return this;
		}

		public Criteria andEndDateIn(List<Date> values) {
			addCriterionForJDBCDate("END_DATE in", values, "endDate");
			return this;
		}

		public Criteria andEndDateNotIn(List<Date> values) {
			addCriterionForJDBCDate("END_DATE not in", values, "endDate");
			return this;
		}

		public Criteria andEndDateBetween(Date value1, Date value2) {
			addCriterionForJDBCDate("END_DATE between", value1, value2,
					"endDate");
			return this;
		}

		public Criteria andEndDateNotBetween(Date value1, Date value2) {
			addCriterionForJDBCDate("END_DATE not between", value1, value2,
					"endDate");
			return this;
		}
	}
}